//-------------lesson 49-------------------------------------------------
//---------------------HTML encoding ------------------------------------


the problem of that when Creating MVC Custom contrlls , and this custom controls return string , some char will be in encoded 
to fix this issue youcan : 

1- 
2-
3- 

for more details look at Image Custom helpers file 

//-------------------lesson 50 --------------------------------------------------

=> enable comppile time Errors and validation 
1- simply open your app 
2- using AppName.csproj with  NotPad ++ 
3- search for  <MvcBuildViews>false</MvcBuildViews>
4- change it with true .

//------------------lesson 51 ----------------------------------------------------
//------------------partial Views-------------------------------------------------

make aview as ashared between many views and called it with @html.Partial 


=> you can put shared view in controller folder and this means that it will be seen by this controller only 
   and you can also put it in shared folder where all views can see it . 

=> you can simply use @html.Partial(viewname , object that this view build over)


//-------------------Lesson 52--------------------------------------------------------------
//-------------------Part 53 Difference between html.partial and html.renderpartial---------


both of them is used to render Partial view 

Difference between html.partial and Html.RenderRartial is that :

=> Partial : return MvcHtmlString which can be assigned to avariable and manipulating it if required . 

=> RenderRartial  : Returns void and output will be written directly to the screen  

which one is better in performance ? 

from a performance perspective , rendering directly to the output stream is better 
so RenderRartial() does exactly the same thing and it better for performance over Partial .

//-------------------Lesson 54------------------------------------------------------------------
   
Cross site scripting attack : 



//-------------------Lesson 57------------------------------------------------------------------

=> you can write full block of c# code in cshtml file using :

@{
  -----all c# code -----
  
  
}

=> you can also switch from this block of c# code is to use  <text> </text>   or @:

demo : 

@for ( int i=0 ; i<=19 ; i++)
{
    <b>@i </b>
	
	if(i %2 == 0)
	{
	 @: -Even 
	}
	
    else
    {
	 <text> -odd </text>
	}
}


//-------------------Lesson 58------------------------------------------------------------------

=> @*this is to comment some thing in Razo Viwes *@

=> also you can switch between html and c# using operator @ as you know

=>  mvc is smart and can understand @ symbol in Email and does not Generate any error 
demo : 

 <b> minaanwer@gmail.com </b>
 
=> in another cases where @ is not in Email , MVC can not understand it 
  demo : 

      I will meet  you  @ office 

 simply add another @ to @ and mvc will override it  
 I will meet you @@office -->  I will meet you @ office  
	
	
//-------------------Lesson 59------------------------------------------------------------------
=> layout View 


put all code that always repeated in every page in out website once in layout view 
anf all views will inherit form this view . 

=> to add layout which is used as master Page simply add a file in shared folder  _Layout.cshtml
   where you want to make every view add its content jsut add  : @RenderBody()
	
=> in every view to make it inherit from this layout just add 
   Layout = "~/Views/Shared/_Layout.cs"; 
//-------------------Lesson 60------------------------------------------------------------------

=>  to avoid repeat this line : Layout = "~/Views/Shared/_Layout.cs"; 

          in every view in the solution , just go to _ViewStart.cshtml
          this file is always called after begin executing every view  .and add line that you want to be repeated 
  
=>   you can still use Layout prop in every page , and override the inherited value . 


=>   you can also specify the layout file in controller action method  :  return View("Create","_LayoutName");

=> you can also change layout based on Browser : 
  
   @{
       Layout = Request.Browser.IsBrowser("Chrome") ? 
	                          "~/Views/Shared/_Layout.cshtml" : "~/Views/Shared/_layoutIE.cshtml";
    }
 


































































































