//----------------implementing Delete Request-----------------------------
1- Go To controller and add  :

   public ActionResult Delete(int id)
        {
            EmployeeBO empbo = new EmployeeBO();
            empbo.Delete(id);

            return RedirectToAction("Index");

        }
		
2- no need to add view as it will redirect to index after finishing delete 
3- you will need to add this function in bussinness object :

 public void Delete(int id)
        {
            new EmployeeRepo().Delete(id);
        }
		
4- and also to repo : 

        public void Delete(int id)
        {
            try
            {
                var EmpEntity = dbx.Employees.FirstOrDefault(x => x.Id == id);
                dbx.Employees.Remove(EmpEntity);
                dbx.SaveChanges();
            }
            catch 
            {
                
            }
           
        }
		
5- Lets answer the question of why it is not recommended to use Get Request to make Delete Request 

+ simply add html page with this html :

<a href= "http://localhost:18317/employee/Delete/26"  >
<img src= "C:/Images/img_set.png"  height="42" width="42" />
</a>

after you press the button you can Easily remove element from database : 


//-----------------------------------------------------------------------------------------------
       //---24---deleting request using Post Request------//
	
1- Decorate delete function with http post attribute : 


        [HttpPost]
        public ActionResult Delete(int id)
        {
            EmployeeBO empbo = new EmployeeBO();
            empbo.Delete(id);

            return RedirectToAction("Index");

        }
2- we want to make a post request from our code ..
   action link can not make a post request 
   forms is the only controllers that can add post request 
   so we will delete action link and add instead it form and inside form 
   anew button with type submit :
   
   
    //---------this code -------------------------------------------------------
   
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Statues)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
   
    //----------------------will be changed by this----------------------------- 
      @foreach (var item in Model)
        {
            using (Html.BeginForm("Delete", "Employee", new {id = item.Id}))
             {
                 <tr>
                     <td>
                         @Html.DisplayFor(modelItem => item.Name)
                     </td>
                     <td>
                         @Html.DisplayFor(modelItem => item.City)
                     </td>
                     <td>
                         @Html.DisplayFor(modelItem => item.Gender)
                     </td>
                     <td>
                         @Html.DisplayFor(modelItem => item.Statues)
                     </td>
                     <td>
                         @Html.ActionLink("Edit", "Edit", new {id = item.Id}) |
                         <input type="submit" value="Delete" onclick="return  confirm('are you sure you want to delete record with ID = @item.Id');"/>
                     </td>
                 </tr>
             }
        }

//---------------------------------------------------------------------------------------------

//------------------------25/ Creating new controller autoGenerated from visual studio -----
	
	its very easy ...
	
	just check the following : 
	
	+ every table have aprimary key and right relation with the other tables 
	+ every table id is autoGenerated ..
	
//---------------------------------------------------------------------------------------------

//------------------------26/ Add fix to Table Name using partial classes  -----
	
	+ he always map database colum names as table colum names also 
	+ what if we need to change this name : 
	- write Display(name ="new col name") in .edmx file 
	  note : 
	     this file is autoGenerated and if it changes in the future ..every manuall update will be removed
	+ use Parial classes :
	
	 at any folder but with the same namespace add this class : 
	 
			using System;
			using System.Collections.Generic;
			using System.ComponentModel;
			using System.ComponentModel.DataAnnotations;
			using System.Linq;
			using System.Web;

			namespace app25.DataBaseModel
			{
			  [MetadataType(typeof(DepartmentMetaData))]
				public  partial class Department
				{
					
				}


				public class DepartmentMetaData
				{
					[Display(Name = "Department Name")]
					public string Name { get; set; }
				}
			}

    + now its working fine : 
//---------------------------------------------------------------------------------------------

//------------------------27 -Customized the autoGenerated Views  -----------------------------
=> to customize your view that will be displayed with required Field ...
    the same manner of previous lecture ..we can not modify the autoGenerated classes of entity framwork so 
	we use partial classes . 

 //----------------------------this is to use all employee/data as required 
 
	    [MetadataType(typeof(EmployeeMetaData))]
    public partial class EmployeeData
    {

    }


    class EmployeeMetaData
    {

        [Required]
        public string DepartmentId { get; set; }
        [Required]
        public string Name { get; set; }
        [Required]
        public string Gender { get; set; }
        [Required]
        public string City { get; set; }
    }

 //------------------------------------------------------------------------------------------------------------------
 
//------------------------28 -Customized the autoGenerated Edit View  -----------------------------

1- to add dynamically error to any attribute you can write this in your code : 

   if(string.IsNullOrEmpty( employeeData.Name))
                ModelState.AddModelError("Name","The name Field Is required ..");
				
==>  guess that out bussinness logic say that we need to make  name attribute as read only ..

   -  first of all Edit Edit.cshtml file to make Editfor helper to displayeFor ..
   -  now , EmployeeData object that passed to Edit Function have null for name 
   -  so  we need to Retrive name Field from Database and Set it to this object 
   
            var dbemp = db.EmployeeDatas.FirstOrDefault(x => x.EmployeeId == employeeData.EmployeeId);
            employeeData.Name = dbemp.Name;   
   - this line will make issues kindly remove it and update object manually  
   - this will be the overall code at Edit : 
   
			public ActionResult Edit([Bind(Include = "EmployeeId,Gender,City,DepartmentId")] EmployeeData employeeData)
			{
				var dbemp = db.EmployeeDatas.FirstOrDefault(x => x.EmployeeId == employeeData.EmployeeId);
				employeeData.Name = dbemp.Name;

				dbemp.City = employeeData.City;
				dbemp.DepartmentId = employeeData.DepartmentId;
				dbemp.Gender = employeeData.Gender;
				

				if (ModelState.IsValid)
				{
				   // db.Entry(employeeData).State = EntityState.Modified;
					db.SaveChanges();
					return RedirectToAction("Index");
				}
				ViewBag.DepartmentId = new SelectList(db.Departments, "Id", "Name", employeeData.DepartmentId);
				return View(employeeData);
			}
		
	- note : 
	if you try to update any field the validation error "Name is required .."
    will be appear . 
	so you will need to remove Required attribute which will make some problems in Create Function ..
	so better solution is to use dynamice Binding in code : 
	
	             var dbemp = db.EmployeeDatas.FirstOrDefault(x => x.EmployeeId == employeeData.EmployeeId);
                 employeeData.Name = dbemp.Name; 

//--------------------------------------------------------------------------------------------------------------

//------------------------29 using dataTransfer Object as model in MVC.net -----------------------------

=> if we want to create view based on custom list  in memory 
   lets create new object called DepartmentTotals : 
   
      public class DepartmentTotals
    {
        public string Name  { get; set; }

        public  int Total { get; set; }
    }
	
	lets fill it from db with department names and total Emp in every department
	
      public ActionResult EmployeeByDepartment()
        {
            var employees = db.EmployeeDatas.Include("Department")
                .GroupBy(x => x.Department.Name)
                .Select(y => new DepartmentTotals
                {
                    Name = y.Key,
                    Total = y.Count()
                }).ToList().OrderBy(y=> y.Total ); 



            return View(employees); 
        }
		
		
    + finally we need  to create View Based on this list :
	  - create new View choose Template : List 
	    and class name : DepartmentTotals 
	+every thing will working fine 
	
	note : 
	  you may face some Problems in Validation Errors unlike Previous method as 
	  validation Errors is a Dictionary that defined in the controller class
      never seen outside . 

	  
//-----------------------------------------------------------------------------------------------

//------------------------Part 30 View engines in asp net mvc-----------------------------

//------------------------Part 31 spark View engines         -----------------------------

 --> not intersted two videos .. actually not applicable 

//----------------------------------------------------------------------------------------------

//----------------------Part 32 Convention used by MVC to Find views-----------------------------
    
   => by default MVC looks for a view with the same name as that of the controller action method 
    name in the following locations :
	
	views/folderNameMatchingControllerName
	views/Shared
	
	with this extensions :
	.cshtml
	.vbhtml
	.aspx
	.ascx
	
	
	if you have Multible files with the same name in different locations 
	you have to specify the full name :
	~/Views/Employee/Index.cshtml
	
	
	
  note : 
    shared folder is basically used to share Views between controller 
	
  conclusion note : 
    when you use code like :

        	return View(employeeData); 
     by default it search for view with the same name of controller and by default
	 with .cshtml 
	 if you want to change this you need to use another overload from View function that 
	 take view name 
	 if you need to go to view with another extensions (.aspx for ex) 
	 you need to put the full path 
     (login.aspx is not correct ....he will render that to login.aspx.cshtml
//----------------------------------------------------------------------------------------
	 //------------------------Part 33 some Html helpers --------------------------------
	 
	 some Helpers ..... most of them is Known 
	 
//----------------------------------------------------------------------------------------
	 //------------------------Part 34 some Html helpers DropDownList --------------------
	 
 =>	you can bind it with hard-code like this : 
	
  <div class="col-md-12">
        <div class="form-group">
            @Html.Label("Gender", new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownList("Departments", new List<SelectListItem>() {

                 new SelectListItem() { Text = "Male" , Value="Male" },
                 new SelectListItem() { Text = "Female" , Value="Female" } }, "Select Gender", new { @class = "form-control" })
            </div>
        </div>
  </div>
  
  => you can also use another constructor that take the list from viewBag 

//------------------------------------------------------------------------------------------
	 //------------------------Part 35 Drop DownList Selective Value -----------------------.

lets cont. to the previous ex : 

=> if you want to start drop dropdownlist to be selected with specify value ..
  you can use this overload : 
   ViewBag.Departments = new SelectList(dbx.Departments, "Id", "Name","1"); 

=>  we add also added a column is selected in dataBase to handel this issue . 

=> finally my code will be like : 

       var Id = dbx.Departments.FirstOrDefault(x => x.IsSelected != null).Id; 
	   
       ViewBag.Departments = new SelectList(dbx.Departments, "Id", "Name",Id.ToString()); 
	 
//------------------------------------------------------------------------------------------
      //----------------------Part 36 Difference between Html TextBox and Html TextBoxFor ------------------
	 
	            long not intersted demo kindly check from video , I got the main idea 

//------------------------------------------------------------------------------------------
      //----------------------Part 37 Generating Aradio Button List control in mvc using html helper ------------------
	 			
=> this is index get action  :
     [HttpGet]
        public ActionResult Index()
        {
            Company company = new Company();

            return View(company); 
        }
		
=> this is index Post Function : 
    		
	    [HttpPost]
        public string Index(Company company)
        {
            if (!string.IsNullOrEmpty(company.SelectedDepartment))
            {
                return "you choosed ..."+company.SelectedDepartment;
            }
            else
                return "nothing selected ..";
        }
	 

=> this is index.cshtml 

		@model WebApplication8.DataBaseModel.Company
		@{
			ViewBag.Title = "Index";
		}
		<h2>Index</h2>
		@using (Html.BeginForm())
		{
			foreach (var department in Model.Departments)
			{
				@Html.RadioButtonFor(m=>m.SelectedDepartment, department.Id) <span>&nbsp;</span> @department.Name
				<br/>
				<br /> 
			}
			<hr/>
			<br/>
			<input type="Submit" value="Submit" />
		}



//------------------------------------------------------------------------------------------
      //----------------------Part 40 using Custom attribute  ------------------

demo :

                public  partial class  tblEmployee
        {
            
        }

        public class  EmployeeMetaData
        {
            [Display(Name ="Full Employee Name")]
            public string FullName { get; set; }
           
           [DisplayName("Person Type ")]
            public  string Gender { get; set; }

           [DisplayFormat(DataFormatString = "{0:d}")]
           public  DateTime  HireDate { get; set; }

          [DisplayFormat(NullDisplayText = "Gender not Specified")]
          public string EmailAddress { get; set; }


        [ScaffoldColumn(false)]
           public  int Salary { get; set; }    //this Colum will not Be displayed 

        }

//------------------------------------------------------------------------------------------
      //----------------------Part 41  ------------------

	            [Display(Name ="Full Employee Name")]
            public string FullName { get; set; }
           
            [DisplayName("Person Type ")]
            public  string Gender { get; set; }

            [DisplayFormat(DataFormatString = "{0:d}")]
           public  DateTime  HireDate { get; set; }

            [DisplayFormat(NullDisplayText = "Gender not Specified")]
            [DataType(DataType.EmailAddress)]
            public string EmailAddress { get; set; }


            [DataType(DataType.Currency)]
            public  int Salary { get; set; }    //this Colum will not Be displayed 

       //  [DisplayColumn("Column name")]  when you have complex type and you want to display only one attribute from it . 

//------------------------------------------------------------------------------------------------------------------------
      //----------------------Part 42  ------------------

	1-  go to Shared and Create anew Folder called : DisplayTemplates
    2-  inside it add new view called Uri (have only) : 
         <a href="@ViewData.Model" target="_blank" >@ViewData.Model</a> 
		 
	3-  at your link that marked 
	
	      [DataType(DataType.Url)]
          public string PersonalWebSite { get; set; }
	
	4- if you want to change the name of file use atttribute 
        
           [DataType(DataType.Url)]

            [UIHint("CustomUrlName")]
            public string PersonalWebSite { get; set; }
			
				 
//-----------------------------------------------------------------------------------------------------------------------

      //----------------------Part 43  ------------------
				 
				 very easy ... hidden and read only attribute
				 
				
//-----------------------------------------------------------------------------------------------------------------------

      //----------------------Part 44  ------------------				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
					 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 			 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 









				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 