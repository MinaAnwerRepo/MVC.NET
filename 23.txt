//----------------implementing Delete Request-----------------------------
1- Go To controller and add  :

   public ActionResult Delete(int id)
        {
            EmployeeBO empbo = new EmployeeBO();
            empbo.Delete(id);

            return RedirectToAction("Index");

        }
		
2- no need to add view as it will redirect to index after finishing delete 
3- you will need to add this function in bussinness object :

 public void Delete(int id)
        {
            new EmployeeRepo().Delete(id);
        }
		
4- and also to repo : 

        public void Delete(int id)
        {
            try
            {
                var EmpEntity = dbx.Employees.FirstOrDefault(x => x.Id == id);
                dbx.Employees.Remove(EmpEntity);
                dbx.SaveChanges();
            }
            catch 
            {
                
            }
           
        }
		
5- Lets answer the question of why it is not recommended to use Get Request to make Delete Request 

+ simply add html page with this html :

<a href= "http://localhost:18317/employee/Delete/26"  >
<img src= "C:/Images/img_set.png"  height="42" width="42" />
</a>

after you press the button you can Easily remove element from database : 


//-----------------------------------------------------------------------------------------------
       //---24---deleting request using Post Request------//
	
1- Decorate delete function with http post attribute : 


        [HttpPost]
        public ActionResult Delete(int id)
        {
            EmployeeBO empbo = new EmployeeBO();
            empbo.Delete(id);

            return RedirectToAction("Index");

        }
2- we want to make a post request from our code ..
   action link can not make a post request 
   forms is the only controllers that can add post request 
   so we will delete action link and add instead it form and inside form 
   anew button with type submit :
   
   
    //---------this code -------------------------------------------------------
   
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Statues)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
   
    //----------------------will be changed by this----------------------------- 
      @foreach (var item in Model)
        {
            using (Html.BeginForm("Delete", "Employee", new {id = item.Id}))
             {
                 <tr>
                     <td>
                         @Html.DisplayFor(modelItem => item.Name)
                     </td>
                     <td>
                         @Html.DisplayFor(modelItem => item.City)
                     </td>
                     <td>
                         @Html.DisplayFor(modelItem => item.Gender)
                     </td>
                     <td>
                         @Html.DisplayFor(modelItem => item.Statues)
                     </td>
                     <td>
                         @Html.ActionLink("Edit", "Edit", new {id = item.Id}) |
                         <input type="submit" value="Delete" onclick="return  confirm('are you sure you want to delete record with ID = @item.Id');"/>
                     </td>
                 </tr>
             }
        }

//---------------------------------------------------------------------------------------------

//------------------------25/ Creating new controller autoGenerated from visual studio -----
	
	its very easy ...
	
	just check the following : 
	
	+ every table have aprimary key and right relation with the other tables 
	+ every table id is autoGenerated ..
	
//---------------------------------------------------------------------------------------------

//------------------------26/ Add fix to Table Name using partial classes  -----
	
	+ he always map database colum names as table colum names also 
	+ what if we need to change this name : 
	- write Display(name ="new col name") in .edmx file 
	  note : 
	     this file is autoGenerated and if it changes in the future ..every manuall update will be removed
	+ use Parial classes :
	
	 at any folder but with the same namespace add this class : 
	 
			using System;
			using System.Collections.Generic;
			using System.ComponentModel;
			using System.ComponentModel.DataAnnotations;
			using System.Linq;
			using System.Web;

			namespace app25.DataBaseModel
			{
			  [MetadataType(typeof(DepartmentMetaData))]
				public  partial class Department
				{
					
				}


				public class DepartmentMetaData
				{
					[Display(Name = "Department Name")]
					public string Name { get; set; }
				}
			}

    + now its working fine : 
//---------------------------------------------------------------------------------------------

//------------------------27 -Customized the autoGenerated Views  -----------------------------
=> to customize your view that will be displayed with required Field ...
    the same manner of previous lecture ..we can not modify the autoGenerated classes of entity framwork so 
	we use partial classes . 

 //----------------------------this is to use all employee/data as required 
 
	    [MetadataType(typeof(EmployeeMetaData))]
    public partial class EmployeeData
    {

    }


    class EmployeeMetaData
    {

        [Required]
        public string DepartmentId { get; set; }
        [Required]
        public string Name { get; set; }
        [Required]
        public string Gender { get; set; }
        [Required]
        public string City { get; set; }
    }

 //------------------------------------------------------------------------------------------------------------------
 
//------------------------28 -Customized the autoGenerated Edit View  -----------------------------

1- to add dynamically error to any attribute you can write this in your code : 

   if(string.IsNullOrEmpty( employeeData.Name))
                ModelState.AddModelError("Name","The name Field Is required ..");
				
==>  guess that out bussinness logic say that we need to make  name attribute as read only ..

   -  first of all Edit Edit.cshtml file to make Editfor helper to displayeFor ..
   -  now , EmployeeData object that passed to Edit Function have null for name 
   -  so  we need to Retrive name Field from Database and Set it to this object 
   
            var dbemp = db.EmployeeDatas.FirstOrDefault(x => x.EmployeeId == employeeData.EmployeeId);
            employeeData.Name = dbemp.Name;   
   - this line will make issues kindly remove it and update object manually  
   - this will be the overall code at Edit : 
   
			public ActionResult Edit([Bind(Include = "EmployeeId,Gender,City,DepartmentId")] EmployeeData employeeData)
			{
				var dbemp = db.EmployeeDatas.FirstOrDefault(x => x.EmployeeId == employeeData.EmployeeId);
				employeeData.Name = dbemp.Name;

				dbemp.City = employeeData.City;
				dbemp.DepartmentId = employeeData.DepartmentId;
				dbemp.Gender = employeeData.Gender;
				

				if (ModelState.IsValid)
				{
				   // db.Entry(employeeData).State = EntityState.Modified;
					db.SaveChanges();
					return RedirectToAction("Index");
				}
				ViewBag.DepartmentId = new SelectList(db.Departments, "Id", "Name", employeeData.DepartmentId);
				return View(employeeData);
			}
		
	- note : 
	if you try to update any field the validation error "Name is required .."
    will be appear . 
	so you will need to remove Required attribute which will make some problems in Create Function ..
	so better solution is to use dynamice Binding in code : 
	
	             var dbemp = db.EmployeeDatas.FirstOrDefault(x => x.EmployeeId == employeeData.EmployeeId);
                 employeeData.Name = dbemp.Name; 

//--------------------------------------------------------------------------------------------------------------

//------------------------29 using dataTransfer Object as model in MVC.net -----------------------------

=> if we want to create view based on custom list  in memory 
   lets create new object called DepartmentTotals : 
   
      public class DepartmentTotals
    {
        public string Name  { get; set; }

        public  int Total { get; set; }
    }
	
	lets fill it from db with department names and total Emp in every department
	
      public ActionResult EmployeeByDepartment()
        {
            var employees = db.EmployeeDatas.Include("Department")
                .GroupBy(x => x.Department.Name)
                .Select(y => new DepartmentTotals
                {
                    Name = y.Key,
                    Total = y.Count()
                }).ToList().OrderBy(y=> y.Total ); 



            return View(employees); 
        }
		
		
    + finally we need  to create View Based on this list :
	  - create new View choose Template : List 
	    and class name : DepartmentTotals 
	+every thing will working fine 
	
	note : 
	  you may face some Problems in Validation Errors unlike Previous method as 
	  validation Errors is a Dictionary that defined in the controller class
      never seen outside . 

	  
//-----------------------------------------------------------------------------------------------

//------------------------Part 30 View engines in asp net mvc-----------------------------

















				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
					 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 			 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 









				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 